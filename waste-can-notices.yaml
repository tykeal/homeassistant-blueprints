---
# SPDX-License-Identifier: MIT
blueprint:
  name: Waste Can Notifier (v0.1)

  description: |
    Basic notifier for use with Rental Control for requesting guest to take out
    waste cans.

    Notifications are expected to go to a Zulip notify service

  domain: automation

  input:
    notify_service:
      name: Zulip Notify
      description: |
        Notify service name to send to. Should be a Zulip (or compatible)
        notify service
      default: "zulip"
    notify_topic:
      name: Notification topic
      description: |
        The topic that will be used in the Zulip stream
      default: "Waste Cans"
    notification_time:
      name: Time to send the notification
      description: |
        The time each day that the automation will fire to send the
        notification.
      selector:
        time:
      default: "09:00:00"
    garbage_sensor:
      name: Sensor for garbage collection
      description: The sensor used for garbage collection
      selector:
        entity:
          integration: waste_collection_schedule
          domain: sensor
    recycling_sensor:
      name: Sensor for the recycling collection
      description: The sensor used for the recycling collection
      selector:
        entity:
          integration: waste_collection_schedule
          domain: sensor
    rental_control_event_0:
      name: Primary Rental Control Event
      description: The current or exiting guest event
      selector:
        entity:
          integration: rental_control
          domain: sensor
    rental_control_event_1:
      name: Secondary Rental Control Event
      description: The next guest event
      selector:
        entity:
          integration: rental_control
          domain: sensor
    garbage_message:
      name: Message for garbage only
      description: |
        The message for when only garbage is to be collected
      default: "take out the garbage this evening."
    recycling_message:
      name: Message for recycling and garbage
      description: |
        The message for when garbage and reycling is to be collected
      # yamllint disable-line rule:line-length
      default: "take out the garbage and recycling this evening."
    guest_message:
      name: Message prefix for asking guest
      description: |
        The message prefix for if the guest is notified
      default: "Please ask the guest to"
    cleaner_message:
      name: Message prefix for asking the cleaner
      description: |
        The message prefix for if the cleaner is notified
      default: "Cleaner please"
    owner_message:
      name: Message prefix for asking the owner
      description: |
        The message prefix for if the owner is notified
      default: "Owner please"

mode: single

trigger:
  - platform: time
    at: !input notification_time

variables:
  # Sensors
  input_garbage_sensor: !input garbage_sensor
  input_recycling_sensor: !input recycling_sensor

  # Dates
  cur_time: "{{ now() }}"
  cur_day: "{{ as_timestamp(cur_time) | timestamp_custom('%Y-%m-%d') }}"
  cur_day_int: "{{ int(as_timestamp(cur_day)) }}"
  tomorrow: "{{ cur_time + timedelta(days = 1) }}"

  # Events
  # yamllint disable rule:line-length
  input_rc_event_0: !input rental_control_event_0
  event_0_start: "{{ as_timestamp(state_attr(input_rc_event_0, 'start'), tomorrow) }}"
  event_0_start_day: "{{ as_timestamp(event_0_start) | timestamp_custom('%Y-%m-%d') }}"
  event_0_start_day_int: "{{ int(as_timestamp(event_0_start_day)) }}"

  event_0_end: "{{ as_timestamp(state_attr(input_rc_event_0, 'end'), tomorrow) }}"
  event_0_end_day: "{{ as_timestamp(event_0_end) | timestamp_custom('%Y-%m-%d') }}"
  event_0_end_day_int: "{{ int(as_timestamp(event_0_end_day)) }}"

  input_rc_event_1: !input rental_control_event_1
  event_1_start: "{{ as_timestamp(state_attr(input_rc_event_1, 'start'), tomorrow) }}"
  event_1_start_day: "{{ as_timestamp(event_1_start) | timestamp_custom('%Y-%m-%d') }}"
  event_1_start_day_int: "{{ int(as_timestamp(event_1_start_day)) }}"
  # yamllint enable

  # Notify
  input_garbage_message: !input garbage_message
  input_recycling_message: !input recycling_message
  input_guest_message: !input guest_message
  input_cleaner_message: !input cleaner_message
  input_owner_message: !input owner_message
  input_notify_service: !input notify_service
  input_notify_topic: !input notify_topic
  notify_message: >-
    {% if states(input_recycling_message) <= 1 %}
      {{ input_recycling_message }}
    {% else %}
      {{ input_garbage_message }}
    {% endif %}
  # yamllint disable-line rule:line-length
  notify_target: "{{ input_notify_service | lower | replace('notify.', '') | replace(' ', '_') }}"
  do_notify: >-
    {%- if input_garbage_sensor == 1 and input_recycling_sensor == 1 -%}
      true
    {%- else -%}
      false
    {%- endif -%}

action:
  choose:
    - alias: Notify Cleaner
      conditions:
        - "{{ event_0_end_day_int == cur_date_int }}"
        - "{{ event_1_start_day_int == cur_date_int }}"
        - "{{ do_notify }}"
      sequence:
        - service: notify.{{ notify_target }}
          data:
            title: "{{ input_notify_topic }}"
            message: "{{ input_cleaner_message }} {{ notify_message }}"

    - alias: Notify Guest
      conditions:
        - "{{ event_0_start_day_int == cur_date_int }}"
        - "{{ do_notify }}"
      sequence:
        - service: notify.{{ notify_target }}
          data:
            title: "{{ input_notify_topic }}"
            message: "{{ input_guest_message }} {{ notify_message }}"

    - alias: Notify Owner
      conditions:
        - "{{ event_0_start_day_int > cur_date_int }}"
        - "{{ do_notify }}"
      sequence:
        - service: notify.{{ notify_target }}
          data:
            title: "{{ input_notify_topic }}"
            message: "{{ input_owner_message }} {{ notify_message }}"
